--Create tables and load database from csv's
-- Assumes squirrelnest Database Exists
  --CREATE DATABASE squirrelnest;  command to create database, if needed.
-- Run this SQL file against squirrelnest database
  -- psql -U postgres     enter psql
  -- \l                   lists databases
  -- \c squirrelnest               connect to qas database
  -- \i init.sql   runs this script file
-- Using absolute value of file paths for import, change if necessary

--Clear Old Data and Tables

DROP TABLE IF EXISTS Users CASCADE;

DROP TABLE IF EXISTS Properties CASCADE;

DROP TABLE IF EXISTS Portfolios CASCADE;

DROP TABLE IF EXISTS Lenders CASCADE;

DROP TABLE IF EXISTS Deadlines CASCADE;

DROP TABLE IF EXISTS Transactions CASCADE;

CREATE TABLE Users
(
 id                       int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY UNIQUE,
 hash                    varchar(60) NOT NULL,
 password_salt           varchar(10) NOT NULL,
 session_id              varchar(20) NULL,
 email                   varchar(20) NOT NULL,
 date_created            timestamptz NOT NULL,
 first_name              varchar(50) NULL,
 last_name               varchar(50) NULL,
 street_address          varchar(100) NULL,
 city                    varchar(50) NULL,
 "state"                 varchar(50) NULL,
 zip                     varchar(10) NULL,
 phone_number            smallint NULL,
 portfolio BYTEA NOT NULL,
 profile_img_url         varchar(200) NULL,
 portfolio_created_at       timestamptz NULL,
 CONSTRAINT fk_owner_users FOREIGN KEY ( owner_id ) REFERENCES portfolios ( id )
 PRIMARY KEY (id)
);

CREATE TABLE Properties (
	id varchar(255) NOT NULL DEFAULT NEXTVAL ('Properties_seq'),
	address varchar(255) NOT NULL,
	units INT NOT NULL,
	occupancy INT NOT NULL,
	acquisitionPrice INT NOT NULL,
	marketValue INT NOT NULL,
	loanBalance INT NOT NULL,
	equity INT NOT NULL,
	owner INT NOT NULL,
	name varchar(255),
	city varchar(255),
	PRIMARY KEY (id)
);

CREATE TABLE Portfolios (
	id varchar(255) NOT NULL DEFAULT NEXTVAL ('Portfolios_seq'),
	property varchar(255) NOT NULL,
	user varchar(255) NOT NULL,
	PRIMARY KEY (id)
);
CREATE TABLE Properties_Posts
(
 id                                    int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY UNIQUE,
 portfolio_id          int NOT NULL,
 salary_min           int NULL,
 locations            varchar(100) NULL,
 salary_type          varchar(10) NULL,
 date                 timestamptz NOT NULL,
 description          text NOT NULL,
 salary_currency_code varchar(10) NULL,
 salary               varchar(50) NULL,
 site                 varchar(10) NULL,
 url                  varchar(200) NOT NULL UNIQUE,
 CONSTRAINT fk_portfolio_job_post FOREIGN KEY ( portfolio_id ) REFERENCES portfolios ( id )
);

CREATE INDEX fk_portfolio_job_post_index ON Job_Posts
(
 portfolio_id
);

CREATE SEQUENCE Lenders_seq;

CREATE TABLE Lenders (
	id varchar(255) NOT NULL DEFAULT NEXTVAL ('Lenders_seq'),
	properties varchar(255) NOT NULL,
	PRIMARY KEY (id)
);


CREATE SEQUENCE Deadlines_seq;

CREATE TABLE Deadlines (
	id varchar(255) NOT NULL DEFAULT NEXTVAL ('Deadlines_seq'),
	property varchar(255) NOT NULL,
	PRIMARY KEY (id)
);


CREATE SEQUENCE Transactions_seq;

CREATE TABLE Transactions (
	id varchar(255) NOT NULL DEFAULT NEXTVAL ('Transactions_seq'),
	property varchar(255) NOT NULL,
	lender varchar(255) NOT NULL,
	amount DOUBLE PRECISION NOT NULL,
	account varchar(255) NOT NULL,
	category varchar(255) NOT NULL,
	PRIMARY KEY (id)
);

ALTER TABLE Users ADD CONSTRAINT Users_fk0 FOREIGN KEY (portfolio) REFERENCES Portfolios(id);

ALTER TABLE Properties ADD CONSTRAINT Properties_fk0 FOREIGN KEY (owner) REFERENCES Users(id);

ALTER TABLE Portfolios ADD CONSTRAINT Portfolios_fk0 FOREIGN KEY (property) REFERENCES Properties(id);

ALTER TABLE Portfolios ADD CONSTRAINT Portfolios_fk1 FOREIGN KEY (user) REFERENCES Users(id);

ALTER TABLE Lenders ADD CONSTRAINT Lenders_fk0 FOREIGN KEY (properties) REFERENCES Properties(id);

ALTER TABLE Deadlines ADD CONSTRAINT Deadlines_fk0 FOREIGN KEY (property) REFERENCES Properties(id);

ALTER TABLE Transactions ADD CONSTRAINT Transactions_fk0 FOREIGN KEY (property) REFERENCES Properties(id);

ALTER TABLE Transactions ADD CONSTRAINT Transactions_fk1 FOREIGN KEY (lender) REFERENCES Lenders(id);







